package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"

	"github.com/39TO/gockerql/graph"
	"github.com/39TO/gockerql/graph/model"
)

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id string) (*model.Todo, error) {
	todo, _ := r.ucTodo.FindTodoById(id)
	return &model.Todo{
		ID:    todo.Id,
		Title: todo.Title,
		Done:  todo.Done,
	}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, userID *string) ([]*model.Todo, error) {
	todos, _ := r.ucTodo.FindTodosByUserId(*userID)
	todosModel := make([]*model.Todo, len(todos))
	for i, todo := range todos {
		todosModel[i] = &model.Todo{
			ID:    todo.Id,
			Title: todo.Title,
			Done:  todo.Done,
		}
	}
	return todosModel, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user, _ := r.ucUser.FindUserById(id)
	return &model.User{
		ID:       user.Id,
		Name:     user.Name,
		Email:    user.Email,
		Password: user.Password,
	}, nil
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
